import { $FlowFixMe } from "flow2dts-flow-types-polyfill";
declare const $f2d_getViewManagerConfig: (viewManagerName: string) => unknown;
declare const $f2d_getConstants: () => {};
declare const $f2d_getConstantsForViewManager: (viewManagerName: string) => void;
declare const $f2d_getDefaultEventTypes: () => $FlowFixMe[];
declare const $f2d_lazilyLoadView: (name: string) => void;
declare const $f2d_createView: (reactTag: null | undefined | number, viewName: string, rootTag: number, props: Object) => void;
declare const $f2d_updateView: (reactTag: number, viewName: string, props: Object) => void;
declare const $f2d_focus: (reactTag?: null | undefined | number) => void;
declare const $f2d_blur: (reactTag?: null | undefined | number) => void;
declare const $f2d_findSubviewIn: (reactTag: null | undefined | number, point: number[], callback: (nativeViewTag: number, left: number, top: number, width: number, height: number) => void) => void;
declare const $f2d_dispatchViewManagerCommand: (reactTag: null | undefined | number, commandID: number, commandArgs?: null | undefined | (string | number | boolean)[]) => void;
declare const $f2d_measure: (reactTag: null | undefined | number, callback: (left: number, top: number, width: number, height: number, pageX: number, pageY: number) => void) => void;
declare const $f2d_measureInWindow: (reactTag: null | undefined | number, callback: (x: number, y: number, width: number, height: number) => void) => void;
declare const $f2d_viewIsDescendantOf: (reactTag: null | undefined | number, ancestorReactTag: null | undefined | number, callback: (result: boolean[]) => void) => void;
declare const $f2d_measureLayout: (reactTag: null | undefined | number, ancestorReactTag: null | undefined | number, errorCallback: (error: Object) => void, callback: (left: number, top: number, width: number, height: number) => void) => void;
declare const $f2d_measureLayoutRelativeToParent: (reactTag: null | undefined | number, errorCallback: (error: Object) => void, callback: (left: number, top: number, width: number, height: number) => void) => void;
declare const $f2d_setJSResponder: (reactTag: null | undefined | number, blockNativeResponder: boolean) => void;
declare const $f2d_clearJSResponder: () => void;
declare const $f2d_configureNextLayoutAnimation: (config: Object, callback: () => void, errorCallback: (error: Object) => void) => void;
declare const $f2d_removeSubviewsFromContainerWithID: (containerID: number) => void;
declare const $f2d_replaceExistingNonRootView: (reactTag?: null | undefined | number, newReactTag?: null | undefined | number) => void;
declare const $f2d_setChildren: (containerTag: null | undefined | number, reactTags: number[]) => void;
declare const $f2d_manageChildren: (containerTag: null | undefined | number, moveFromIndices: number[], moveToIndices: number[], addChildReactTags: number[], addAtIndices: number[], removeAtIndices: number[]) => void;
declare const $f2d_setLayoutAnimationEnabledExperimental: (enabled: boolean) => void;
declare const $f2d_sendAccessibilityEvent: (reactTag: null | undefined | number, eventType: number) => void;
declare const $f2d_showPopupMenu: (reactTag: null | undefined | number, items: string[], error: (error: Object) => void, success: (event: string, selected?: number) => void) => void;
declare const $f2d_dismissPopupMenu: () => void;
export { $f2d_getViewManagerConfig as getViewManagerConfig, $f2d_getConstants as getConstants, $f2d_getConstantsForViewManager as getConstantsForViewManager, $f2d_getDefaultEventTypes as getDefaultEventTypes, $f2d_lazilyLoadView as lazilyLoadView, $f2d_createView as createView, $f2d_updateView as updateView, $f2d_focus as focus, $f2d_blur as blur, $f2d_findSubviewIn as findSubviewIn, $f2d_dispatchViewManagerCommand as dispatchViewManagerCommand, $f2d_measure as measure, $f2d_measureInWindow as measureInWindow, $f2d_viewIsDescendantOf as viewIsDescendantOf, $f2d_measureLayout as measureLayout, $f2d_measureLayoutRelativeToParent as measureLayoutRelativeToParent, $f2d_setJSResponder as setJSResponder, $f2d_clearJSResponder as clearJSResponder, $f2d_configureNextLayoutAnimation as configureNextLayoutAnimation, $f2d_removeSubviewsFromContainerWithID as removeSubviewsFromContainerWithID, $f2d_replaceExistingNonRootView as replaceExistingNonRootView, $f2d_setChildren as setChildren, $f2d_manageChildren as manageChildren, $f2d_setLayoutAnimationEnabledExperimental as setLayoutAnimationEnabledExperimental, $f2d_sendAccessibilityEvent as sendAccessibilityEvent, $f2d_showPopupMenu as showPopupMenu, $f2d_dismissPopupMenu as dismissPopupMenu };
// @flow
declare const $f2tExportDefault:
/*[FLOW2DTS - Warning] This type was an exact object type in the original Flow source.*/
{
  getViewManagerConfig: (viewManagerName: string) => unknown;
  getConstants: () => {};
  getConstantsForViewManager: (viewManagerName: string) => void;
  getDefaultEventTypes: () => $FlowFixMe[];
  lazilyLoadView: (name: string) => void;
  createView: (reactTag: null | undefined | number, viewName: string, rootTag: number, props: Object) => void;
  updateView: (reactTag: number, viewName: string, props: Object) => void;
  focus: (reactTag?: null | undefined | number) => void;
  blur: (reactTag?: null | undefined | number) => void;
  findSubviewIn: (reactTag: null | undefined | number, point: number[], callback: (nativeViewTag: number, left: number, top: number, width: number, height: number) => void) => void;
  dispatchViewManagerCommand: (reactTag: null | undefined | number, commandID: number, commandArgs?: null | undefined | (string | number | boolean)[]) => void;
  measure: (reactTag: null | undefined | number, callback: (left: number, top: number, width: number, height: number, pageX: number, pageY: number) => void) => void;
  measureInWindow: (reactTag: null | undefined | number, callback: (x: number, y: number, width: number, height: number) => void) => void;
  viewIsDescendantOf: (reactTag: null | undefined | number, ancestorReactTag: null | undefined | number, callback: (result: boolean[]) => void) => void;
  measureLayout: (reactTag: null | undefined | number, ancestorReactTag: null | undefined | number, errorCallback: (error: Object) => void, callback: (left: number, top: number, width: number, height: number) => void) => void;
  measureLayoutRelativeToParent: (reactTag: null | undefined | number, errorCallback: (error: Object) => void, callback: (left: number, top: number, width: number, height: number) => void) => void;
  setJSResponder: (reactTag: null | undefined | number, blockNativeResponder: boolean) => void;
  clearJSResponder: () => void;
  configureNextLayoutAnimation: (config: Object, callback: () => void, errorCallback: (error: Object) => void) => void;
  removeSubviewsFromContainerWithID: (containerID: number) => void;
  replaceExistingNonRootView: (reactTag?: null | undefined | number, newReactTag?: null | undefined | number) => void;
  setChildren: (containerTag: null | undefined | number, reactTags: number[]) => void;
  manageChildren: (containerTag: null | undefined | number, moveFromIndices: number[], moveToIndices: number[], addChildReactTags: number[], addAtIndices: number[], removeAtIndices: number[]) => void;
  // Android only
  setLayoutAnimationEnabledExperimental: (enabled: boolean) => void;
  sendAccessibilityEvent: (reactTag: null | undefined | number, eventType: number) => void;
  showPopupMenu: (reactTag: null | undefined | number, items: string[], error: (error: Object) => void, success: (event: string, selected?: number) => void) => void;
  dismissPopupMenu: () => void;
};
export default $f2tExportDefault;